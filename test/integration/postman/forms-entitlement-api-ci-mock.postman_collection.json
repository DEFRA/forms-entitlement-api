{
  "info": {
    "_postman_id": "7d37736f-7f8e-4b20-8d8f-260b06192ab8",
    "name": "Entitlement",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "23938788"
  },
  "item": [
    {
      "name": "Health",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{root}}/health",
          "host": [
            "{{root}}"
          ],
          "path": [
            "health"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add user 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.message).to.eq('success')",
              "    pm.expect(responseData.id).to.eq('user-id1')",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"userId\": \"user-id1\",\n    \"roles\": [\"admin\"]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{root}}/users",
          "host": [
            "{{root}}"
          ],
          "path": [
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Add user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.message).to.eq('success')",
              "    pm.expect(responseData.id).to.eq('user-id2')",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"userId\": \"user-id2\",\n    \"roles\": [\"form-creator\"]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{root}}/users",
          "host": [
            "{{root}}"
          ],
          "path": [
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List users",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.message).to.eq('success');",
              "    pm.expect(responseData.entities.length).to.eq(2);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{root}}/users",
          "host": [
            "{{root}}"
          ],
          "path": [
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.message).to.equal('success');",
              "    pm.expect(responseData.entity.userId).to.eq('user-id2');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{root}}/users/user-id2",
          "host": [
            "{{root}}"
          ],
          "path": [
            "users",
            "user-id2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"roles\": [\"admin\"]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{root}}/users/user-id2",
          "host": [
            "{{root}}"
          ],
          "path": [
            "users",
            "user-id2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get user 2 after update",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.message).to.equal('success');",
              "    pm.expect(responseData.entity.userId).to.eq('user-id2');",
              "    pm.expect(responseData.entity.roles.length).to.eq(1);",
              "    pm.expect(responseData.entity.roles[0]).to.eq('admin');",
              "    pm.expect(responseData.entity.scopes[0]).to.eq('form-delete');",
              "    pm.expect(responseData.entity.scopes[3]).to.eq('user-create');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{root}}/users/user-id2",
          "host": [
            "{{root}}"
          ],
          "path": [
            "users",
            "user-id2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{root}}/users/user-id2",
          "host": [
            "{{root}}"
          ],
          "path": [
            "users",
            "user-id2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "List users again",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"response is ok\", function () {",
              "    pm.response.to.have.status(200);",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.message).to.eq('success');",
              "    pm.expect(responseData.entities.length).to.eq(1);",
              "    pm.expect(responseData.entities[0].userId).to.eq('user-id1');",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{root}}/users",
          "host": [
            "{{root}}"
          ],
          "path": [
            "users"
          ]
        }
      },
      "response": []
    }
  ],
  "auth": {
      "type": "bearer",
      "bearer": [
          {
              "key": "token",
              "value": "{{access_token}}",
              "type": "string"
          }
      ]
  },
  "event": [
    {
        "listen": "prerequest",
        "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
                "// Collection Pre-request Script",
                "",
                "function fetchNewToken() {",
                "    const username = pm.environment.get('username');",
                "    const password = pm.environment.get('password');",
                "    const clientId = pm.environment.get('clientId');",
                "    const clientSecret = pm.environment.get('clientSecret');",
                "    const scope = pm.environment.get('scope');",
                "    const accessTokenUrl = pm.environment.get('accessTokenUrl');",
                "",
                "    console.log(\"Attempting to fetch new token...\");",
                "",
                "    let basicAuthHeaderValue = \"\";",
                "    try {",
                "        const credentialsToEncode = clientId + \":\" + clientSecret;",
                "        basicAuthHeaderValue = \"Basic \" + btoa(credentialsToEncode);",
                "    } catch (e) {",
                "        console.error(\"Error encoding Basic Auth for token request:\", e);",
                "        return; ",
                "    }",
                "",
                "    pm.sendRequest({",
                "        url: accessTokenUrl,",
                "        method: 'POST',",
                "        header: [",
                "            { key: 'Content-Type', value: 'application/x-www-form-urlencoded' },",
                "            { key: 'Authorization', value: basicAuthHeaderValue }",
                "        ],",
                "        body: {",
                "            mode: 'urlencoded',",
                "            urlencoded: [",
                "                { key: 'grant_type', value: 'password' },",
                "                { key: 'username', value: username },",
                "                { key: 'password', value: password },",
                "                { key: 'scope', value: scope }",
                "            ]",
                "        }",
                "    }, function(err, res) {",
                "        if (err) {",
                "            console.error('Error fetching token:', JSON.stringify(err));",
                "            pm.environment.unset('access_token');",
                "            pm.environment.unset('token_expiry_time');",
                "        } else {",
                "            if (res.code === 200) {",
                "                var responseJson = res.json();",
                "                pm.environment.set('access_token', responseJson.access_token);",
                "                const expiryTime = Date.now() + (responseJson.expires_in * 1000) - 30000; ",
                "                pm.environment.set('token_expiry_time', expiryTime);",
                "                console.log('New token acquired. Expires around: ' + new Date(expiryTime).toLocaleTimeString());",
                "            } else {",
                "                console.error('Failed to get new token. Status:', res.code, 'Body:', res.text());",
                "                pm.environment.unset('access_token');",
                "                pm.environment.unset('token_expiry_time');",
                "            }",
                "        }",
                "    });",
                "}",
                "",
                "const existingToken = pm.environment.get('access_token');",
                "const expiryTime = pm.environment.get('token_expiry_time');",
                "",
                "if (existingToken && expiryTime && Date.now() < parseInt(expiryTime)) {",
                "    // console.log('Using existing, valid token.'); // Optional: uncomment for debugging token reuse",
                "} else {",
                "    fetchNewToken();",
                "}"
            ]
        }
    },
    {
        "listen": "test",
        "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
                ""
            ]
        }
    }
  ]
}
